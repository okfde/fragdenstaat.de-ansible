---

- name: Install http-01 dependencies
  when: "certbot_mode is defined and certbot_mode == 'http-01'"
  block:
  - name: Ensure software-properties-common installed
    ansible.builtin.apt:
      name: software-properties-common
      state: latest
    register: certbot_repo_added
    retries: 30
    delay: 10

  - name: Install Certbot.
    ansible.builtin.apt:
      pkg:
        - certbot
        - python3-certbot-nginx
      state: latest
    retries: 30
    delay: 10

- name: Install dns-01 dependencies
  when: "certbot_mode is defined and certbot_mode == 'dns-01'"
  block:
    - name: Install pip
      ansible.builtin.apt:
        pkg:
          - python3-pip
          - python3-virtualenv
      retries: 30
      delay: 10

    - name: Install certbot (pip-version)
      ansible.builtin.pip:
        name: certbot
        virtualenv: /opt/certbot

    - name: Install certbot-dns-hetzner
      ansible.builtin.pip:
        name: certbot-dns-hetzner
        virtualenv: /opt/certbot

    - name: Install certbot-nginx
      ansible.builtin.pip:
        name: certbot-nginx
        virtualenv: /opt/certbot

    - name: Create letsencrypt directory
      ansible.builtin.file:
        state: directory
        path: /etc/letsencrypt/
        owner: root
        group: root
        mode: "0755"

    - name: Set hetzner api token
      ansible.builtin.copy:
        dest: /etc/letsencrypt/hetzner.ini
        content: |
          dns_hetzner_api_token = {{ hetzner_dns_api_token }}
        mode: "0600"
        owner: root
        group: root

- name: Make letsencrypt tmp dir
  ansible.builtin.file:
    path: "{{ letsencrypt_tmp_dir }}"
    state: directory
    mode: "0755"

- name: Generate cert for HTTPS domains
  ansible.builtin.command:
    cmd: "{{ certbot_script }} certonly -n {% if certbot_mode == 'dns-01' %}--authenticator dns-hetzner --dns-hetzner-credentials /etc/letsencrypt/hetzner.ini{% else %} --webroot -w {{ letsencrypt_tmp_dir }}{% endif %} --agree-tos --email {{ letsencrypt_registration_email }} -d '{% for x in item %}{{ x }}{% if not loop.last %},{% endif %}{% endfor %}'"
  args:
    creates: "{{ certbot_output_dir }}{{ item[0] }}"
  loop: "{{ https_domains }}"
  tags:
    - skip_ansible_lint

- name: Add renew_hooks
  community.general.ini_file:
    section: renewalparams
    option: renew_hook
    value: "{{ letsencrypt_renew_hooks[item[0]] | default('systemctl reload nginx') }}"
    dest: "/etc/letsencrypt/renewal/{{ item[0] }}.conf"
    mode: "0644"
  loop: "{{ https_domains }}"

- name: Add custom webroot_map to renewal files
  community.general.ini_file:
    section: "[webroot_map]"
    option: "{{ item[0] }}"
    value: "{{ letsencrypt_tmp_dir }}"
    dest: "/etc/letsencrypt/renewal/{{ item[0] }}.conf"
    mode: "0644"
  loop: "{{ https_domains }}"

- name: Add custom webroot_map to renewal for second domain
  community.general.ini_file:
    section: "[webroot_map]"
    option: "{{ item[1] }}"
    value: "{{ letsencrypt_tmp_dir }}"
    dest: "/etc/letsencrypt/renewal/{{ item[0] }}.conf"
    mode: "0644"
  when: item[1] is defined
  loop: "{{ https_domains }}"

- name: Ensure a cron job to auto-renew the cert exists
  ansible.builtin.cron:
    name: daily auto renew cert
    special_time: daily
    job: "{{ certbot_script }} renew"
    state: present
  when: certbot_auto_renew
