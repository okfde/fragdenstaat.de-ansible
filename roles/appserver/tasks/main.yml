---

- name: Import setup_gunicorn.yml
  ansible.builtin.import_tasks: setup_gunicorn.yml

- name: Import setup_supervisor.yml
  ansible.builtin.import_tasks: setup_supervisor.yml
  tags: supervisor

- name: Import setup_onion_service.yml
  ansible.builtin.import_tasks: setup_onion_service.yml
  when: onion_service_enabled
  tags:
    - onion

- name: Import build_frontend.yml
  ansible.builtin.import_tasks: build_frontend.yml

# Run collect static
- name: Run collect static
  ansible.builtin.include_role:
    name: app
    tasks_from: collect_static
  tags:
    - deploy-web
    - deploy-backend
    - deploy-frontend

- name: Copy static file built for onion page
  ansible.builtin.copy:
    src: "{{ nginx_static_dir }}"
    remote_src: true
    dest: "{{ onion_nginx_static_dir }}"
    owner: "{{ gunicorn_user }}"
    group: "www-data"
    mode: "0755"
  when: onion_service_enabled
  tags:
    - onion
    - deploy-web
    - deploy-backend
    - deploy-frontend

- name: Fix-up all static URLs in css files
  ansible.builtin.command:
    cmd: "find . -name '*.css' -exec sed -i -e 's@{{ static_asset_path }}@{{ onion_static_url }}@g' {} \\;"
    chdir: "{{ onion_nginx_static_dir }}"
  when: onion_service_enabled
  changed_when: false
  tags:
    - onion
    - deploy
    - deploy-frontend
    - deploy-web
    - deploy-backend

- name: Reload application
  community.general.supervisorctl:
    name: "{{ item }}"
    state: signalled
    signal: HUP
  with_items:
    - "{{ application_name }}_gunicorn"
    - "{{ application_name }}_uvicorn"
  notify:
    - restart memcached
  tags:
    - deploy
    - deploy-backend
    - deploy-frontend
    - deploy-web

- name: Reload Onion application
  community.general.supervisorctl:
    name: "{{ item }}"
    state: signalled
    signal: HUP
  when: onion_service_enabled
  with_items:
    - "{{ application_name }}_gunicorn_onion"
    - "{{ application_name }}_uvicorn_onion"
  notify:
    - restart memcached
  tags:
    - deploy
    - deploy-backend
    - deploy-frontend
    - deploy-web

- name: Allow app local network from media server
  community.general.ufw:
    rule: allow
    port: "8000"
    to_ip: "{{ host_data.site_ipv4 }}"
    from_ip: "{{ hostvars[item].host_data.site_ipv4 }}"
    proto: tcp
  with_items: "{{ groups['media'] }}"
