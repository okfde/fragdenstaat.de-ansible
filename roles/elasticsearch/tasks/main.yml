---

- name: Install JRE
  ansible.builtin.apt:
    name: default-jre
    update_cache: "{{ update_apt_cache }}"
    state: present
  tags: packages

- name: Add Elasticsearch apt key.
  ansible.builtin.apt_key:
    url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    state: present
  tags: packages

- name: Add Elasticsearch repository.
  ansible.builtin.apt_repository:
    repo: 'deb https://artifacts.elastic.co/packages/{{ elasticsearch_version }}/apt stable main'
    state: present
    update_cache: true
  tags: packages

- name: Install Elasticsearch.
  ansible.builtin.package:
    name: elasticsearch
    state: present
  tags: packages

- name: Create jvm options dir
  ansible.builtin.file:
    path: /etc/elasticsearch/jvm.options.d
    owner: root
    group: elasticsearch
    state: directory
    mode: "2750"

- name: Create heapsize option file
  ansible.builtin.file:
    path: /etc/elasticsearch/jvm.options.d/heapsize.options
    owner: root
    group: elasticsearch
    mode: '0644'
    state: touch

- name: Apply heapsize start tuning for systems with greater than 64G memory
  ansible.builtin.lineinfile:
    path: /etc/elasticsearch/jvm.options.d/heapsize.options
    regexp: '^-Xms'
    line: "-Xms{{ elasticsearch_heapsize }}"
  notify: restart elasticsearch
  when: "elasticsearch_heapsize is defined"

- name: Apply heapsize start tuning for systems with greater than 64G memory
  ansible.builtin.lineinfile:
    path: /etc/elasticsearch/jvm.options.d/heapsize.options
    regexp: '^-Xmx'
    line: "-Xmx{{ elasticsearch_heapsize }}"
  notify: restart elasticsearch
  when: "elasticsearch_heapsize is defined"

- name: Set elasticsearch options
  ansible.builtin.lineinfile:
    path: "/etc/elasticsearch/elasticsearch.yml"
    regex: "^(#)?{{ item.key }}"
    line: "{{ item.key }}: {{ item.value }}"
    state: present
  loop:
    - "{ key: \"cluster.name\", value: \"{{ elasticsearch_cluster_name }}\" }"
    - "{ key: \"node.name\", value: \"{{ inventory_hostname }}\" }"
    - "{ key: \"network.bind_host\", value: \"[_local_, _site_]\" }"
    - "{ key: \"discovery.type\", value: \"single-node\" }"
  notify:
    - restart elasticsearch

- name: Create analysis dir
  ansible.builtin.file:
    path: /etc/elasticsearch/analysis
    owner: root
    group: elasticsearch
    state: directory
    mode: "2755"

- name: Get dictionary file
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/uschindler/german-decompounder/6227be052f4215294b5a5d498cdcdadfcf7196e6/dictionary-de.txt"
    dest: "/etc/elasticsearch/analysis/dictionary-de.txt"
    owner: root
    group: elasticsearch
    mode: "0640"

- name: Get hyphenation file
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/uschindler/german-decompounder/6227be052f4215294b5a5d498cdcdadfcf7196e6/de_DR.xml"
    dest: "/etc/elasticsearch/analysis/de_DR.xml"
    owner: root
    group: elasticsearch
    mode: "0640"

- name: Ensure elasticsearch service is running
  ansible.builtin.service:
    name: elasticsearch
    state: started
    enabled: true

- name: Create a elasticsearch.service override directory
  ansible.builtin.file:
    owner: root
    group: root
    mode: "0755"
    path: /etc/systemd/system/elasticsearch.service.d
    state: directory
  notify:
    - reload systemd
    - restart elasticsearch

- name: Set up elasticsearch.service override Restart
  community.general.ini_file:
    dest: /etc/systemd/system/elasticsearch.service.d/restart_override.conf
    owner: root
    group: root
    mode: "0644"
    section: Service
    option: Restart
    value: on-failure
  notify:
    - reload systemd
    - restart elasticsearch

- name: Set up elasticsearch.service override
  community.general.ini_file:
    dest: /etc/systemd/system/elasticsearch.service.d/restart_override.conf
    owner: root
    group: root
    mode: "0644"
    section: Service
    option: RestartSec
    value: "10s"
  notify:
    - reload systemd
    - restart elasticsearch

- name: Allow ES on local network from app
  community.general.ufw:
    rule: allow
    port: 9200
    to_ip: "{{ host_data.site_ipv4 }}"
    from_ip: "{{ hostvars[item].host_data.site_ipv4 }}"
    proto: tcp
  with_items: "{{ groups['app'] }}"
  when: "'site_ipv4' in host_data"

- name: Allow ES on local network from worker
  community.general.ufw:
    rule: allow
    port: 9200
    to_ip: "{{ host_data.site_ipv4 }}"
    from_ip: "{{ hostvars[item].host_data.site_ipv4 }}"
    proto: tcp
  with_items: "{{ groups['worker'] }}"
  when: "'site_ipv4' in host_data"
