---

- name: import db vars
  ansible.builtin.include_vars:
    file: ../roles/db/defaults/main.yml

- name: Collect postgresql db names
  community.postgresql.postgresql_query:
    query: "SELECT datname FROM pg_database;"
  register: postgres_db_names
  become: true
  become_user: postgres

- name: "Ensure database is created"
  become_user: postgres
  become: true
  community.postgresql.postgresql_db:
    name: "{{ db_name }}"
    encoding: 'UTF-8'
    lc_collate: 'en_US.UTF-8'
    lc_ctype: 'en_US.UTF-8'
    template: 'template0'
    state: present
  when: "db_name not in (postgres_db_names.query_result | map(attribute='datname'))"

- name: create postgis extension in db
  become_user: postgres
  become: true
  community.postgresql.postgresql_ext:
    name: postgis
    db: "{{ db_name }}"

- name: create postgis_topology extension in db
  become_user: postgres
  become: true
  community.postgresql.postgresql_ext:
    name: postgis_topology
    db: "{{ db_name }}"

- name: create hstore extension in db
  become_user: postgres
  become: true
  community.postgresql.postgresql_ext:
    name: hstore
    db: "{{ db_name }}"

- name: "Create django_migrations_db_user user"
  community.postgresql.postgresql_user:
    name: "{{ django_migrations_db_user }}"
    password: "{{ django_migrations_db_password }}"
    state: "present"
    encrypted: true
  become: true
  become_user: postgres

- name: "Set django_migrations_db_user privs"
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    role: "{{ django_migrations_db_user }}"
    objs: ALL_IN_SCHEMA
    privs: ALL
    grant_option: true
  become: true
  become_user: postgres

- name: "Set django_migrations_db_user schema privs"
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    role: "{{ django_migrations_db_user }}"
    objs: public
    privs: ALL
    grant_option: true
    type: schema
  become: true
  become_user: postgres

- name: "Create db_user"
  become_user: postgres
  become: true
  community.postgresql.postgresql_user:
    db: "{{ db_name }}"
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    state: "present"
    encrypted: true

- name: "Set db_user privs"
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    role: "{{ db_user }}"
    objs: ALL_IN_SCHEMA
    privs: ALL
    grant_option: true
  become: true
  become_user: postgres

- name: "Set db_user schema privs"
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    role: "{{ db_user }}"
    objs: public
    privs: ALL
    grant_option: true
    type: schema
  become: true
  become_user: postgres

- name: "Set db_user sequence privs"
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    role: "{{ db_user }}"
    objs: ALL_IN_SCHEMA
    privs: USAGE
    grant_option: true
    type: sequence
  become: true
  become_user: postgres

- name: Ensure readonly user has access to the database
  become_user: postgres
  become: true
  community.postgresql.postgresql_user:
    db: "{{ db_name }}"
    name: "{{ db_user_readonly }}"
    password: "{{ db_password_readonly }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present
    encrypted: true

- name: Ensure readonly user has no privileges
  become_user: postgres
  become: true
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    state: absent
    role: "{{ db_user_readonly }}"
    privs: ALL
    objs: ALL_IN_SCHEMA

- name: Ensure readonly user has connect access to db
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    privs: CONNECT
    type: database
    role: "{{ db_user_readonly }}"
    grant_option: true
  become: true
  become_user: postgres

- name: Ensure readonly user has select access to all tables in schema
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    privs: SELECT
    objs: ALL_IN_SCHEMA
    schema: "{{ item }}"
    role: "{{ db_user_readonly }}"
    grant_option: true
  become: true
  become_user: postgres
  with_items:
    - public
    - topology

- name: Ensure readonly user has schema access to all tables in schema
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    privs: USAGE
    type: "schema"
    objs: "public,topology"
    role: "{{ db_user_readonly }}"
    grant_option: true
  become: true
  become_user: postgres

- name: Ensure readonly user has schema access to all sequences in schema
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    privs: SELECT
    type: "sequence"
    objs: "ALL_IN_SCHEMA"
    role: "{{ db_user_readonly }}"
    grant_option: true
  become: true
  become_user: postgres

- name: Ensure user does not have unnecessary privileges
  become_user: postgres
  become: true
  community.postgresql.postgresql_user:
    name: "{{ db_user }}"
    role_attr_flags: "NOSUPERUSER,NOCREATEDB"
    state: present

- name: Allow read-only from auxiliary
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/pg_hba.conf"
    line: "host    {{ db_name }}     {{ db_user_readonly }}    {{ hostvars[item].host_data.site_ipv4 }}/32   md5"
    state: present
  with_items: "{{ groups['auxiliary'] }}"
  notify:
    - reload postgresql config
