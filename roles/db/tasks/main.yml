---

- name: Add the PostgreSQL public GPG key to the apt repo
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc
           state=present

- name: Add PostgreSQL to the sources list
  apt_repository: repo='deb [arch=amd64] https://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main'
                  update_cache={{ update_apt_cache }}
                  state=present

- name: Install PostgreSQL
  apt:
    name:
      - postgresql-12
      - postgresql-contrib
      - libpq-dev
      - postgis
      - postgresql-12-postgis-2.5
      - postgis-doc
      - python3-psycopg2
    update_cache: "{{ update_apt_cache }}"
    state: present
  tags: packages
  when: ansible_distribution_version == "20.04"

# # Cluster upgrade
# sudo apt-get install postgresql-11 postgresql-11-postgis-scripts
# sudo pg_dropcluster 11 main --stop
# sudo pg_upgradecluster 10 main
# sudo pg_dropcluster 10 main

- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes

- name: ensure language packages are installed
  apt:
    name:
      - language-pack-en
      - language-pack-en-base
    state: latest
    update_cache: "{{ update_apt_cache }}"
  register: locale_exists

- name: Ensure locale exists
  locale_gen: name={{ item }}
  with_items:
    - en_US.UTF-8

- name: ensure dpkg is reconfigured
  command: dpkg-reconfigure -f noninteractive locales
  when: locale_exists.changed

- name: restart postgres on locale change
  service: name=postgresql state=restarted enabled=yes
  when: locale_exists.changed

- name: Ensure database is created
  become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"
    encoding: 'UTF-8'
    lc_collate: 'en_US.UTF-8'
    lc_ctype: 'en_US.UTF-8'
    template: 'template0'
    state: present

- name: Ensure user has access to the database
  become_user: postgres
  postgresql_user:
    db: "{{ db_name }}"
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    priv: "ALL"
    state: "present"
    encrypted: true

- name: Ensure readonly user has access to the database
  become_user: postgres
  postgresql_user:
    db: "{{ db_name }}"
    name: "{{ db_user_readonly }}"
    password: "{{ db_password_readonly }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present
    encrypted: true

- name: Ensure user has access to tables
  become_user: postgres
  postgresql_privs:
    database: "{{ db_name }}"
    state: present
    privs: ALL
    type: table
    objs: ALL_IN_SCHEMA
    schema: public
    roles: "{{ db_user }}"
    grant_option: true

- name: Ensure readonly user has no privileges
  become_user: postgres
  postgresql_privs:
    db: "{{ db_name }}"
    state: absent
    role: "{{ db_user_readonly }}"
    privs: ALL
    objs: ALL_IN_SCHEMA

- name: Ensure readonly user has connect access to db
  postgresql_privs:
    db: "{{ db_name }}"
    privs: CONNECT
    type: database
    role: "{{ db_user_readonly }}"
    grant_option: true
  become: true
  become_user: postgres

- name: Ensure readonly user has select access to all tables in schema
  postgresql_privs:
    db: "{{ db_name }}"
    privs: SELECT
    objs: ALL_IN_SCHEMA
    role: "{{ db_user_readonly }}"
    grant_option: true
  become: true
  become_user: postgres

- name: Ensure user has access to all sequences
  become_user: postgres
  postgresql_privs:
    database: "{{ db_name }}"
    state: present
    privs: ALL
    type: sequence
    objs: ALL_IN_SCHEMA
    schema: public
    roles: "{{ db_user }}"
    grant_option: true

- name: Ensure user does not have unnecessary privileges
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    role_attr_flags: "NOSUPERUSER,NOCREATEDB"
    state: present

- name: create postgis extension in db
  become_user: postgres
  postgresql_ext:
    name: postgis
    db: "{{ db_name }}"

- name: create postgis_topology extension in db
  become_user: postgres
  postgresql_ext:
    name: postgis_topology
    db: "{{ db_name }}"

- name: create hstore extension in db
  become_user: postgres
  postgresql_ext:
    name: hstore
    db: "{{ db_name }}"

- name: create citext extension in db
  become_user: postgres
  postgresql_ext:
    name: citext
    db: "{{ db_name }}"
