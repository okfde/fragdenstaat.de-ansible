---

- name: Install Nginx
  apt:
    name: nginx
    update_cache: "{{ update_apt_cache }}"
    state: present
  tags: packages

- name: Ensure that a strong Diffie-Hellman group is used
  command: openssl dhparam -dsaparam -out /etc/ssl/certs/dhparams.pem 4096 creates=/etc/ssl/certs/dhparams.pem
  when: nginx_strong_dh_group is defined and nginx_strong_dh_group

- name: Overwrite the nginx.conf file
  template: src=nginx.conf.j2
            dest=/etc/nginx/nginx.conf
            backup=yes
  notify: reload nginx
  tags:
    - nginx

- name: Check if HTTPS certificates exist
  stat:
    path: "/etc/letsencrypt/live/{{ item.from }}/{{ letsencrypt_cert_filename }}"
  register: https_cert_check
  with_items: "{{ redirect_domains }}"
  tags:
    - nginx
    - config_update


- name: Set HTTPS certificate facts
  set_fact:
    active_https_domains: "{{ active_https_domains|default({}) | combine( {item.item.from: item.stat.exists} ) }}"
  with_items: "{{ https_cert_check.results }}"
  tags:
    - nginx
    - config_update

- debug: var=active_https_domains

- name: Create nginx log files
  file:
    path: "{{ item }}"
    state: touch
    owner: www-data
    group: adm
    mode: u+rw,g+r,o-rwx
  with_items:
    - "{{ nginx_access_log_file }}"
    - "{{ nginx_error_log_file }}"
  when: inventory_hostname in groups['web']

- name: Create the Nginx web configuration file
  template: src=nginx_web_config.j2
            dest=/etc/nginx/sites-available/{{ application_name }}
            backup=yes
  notify: reload nginx
  when: inventory_hostname in groups['web']
  tags:
    - nginx
    - config_update

- name: Create the Nginx media configuration file
  template: src=nginx_media_config.j2
            dest=/etc/nginx/sites-available/{{ application_name }}
            backup=yes
  notify: reload nginx
  when: inventory_hostname in groups['media']
  tags:
    - nginx

- name: Set nginx logrotate settings
  lineinfile:
    path: "/etc/logrotate.d/nginx"
    regex: "^(#)?\\s*{{item.key}}"
    line: "        {{ item.key }} {{ item.value }}"
    state: present
  loop:
    - { key: "rotate", value: "{{ nginx_log_retention_days }}" }
  tags:
    - nginx
  notify:
    - reload nginx

- name: Create custom nginx log rotation file
  template: src=nginx_logrotate.j2
            dest=/etc/logrotate.d/{{ application_name }}_nginx
            backup=yes
  when: inventory_hostname in groups['web']

- name: Create the static_html folder
  file:
    path: "{{ nginx_static_html_dir }}/static_html"
    mode: 0550
    owner: www-data
    state: directory

- name: Create maintenance page
  template:
    src: "{{ item }}.html.j2"
    dest: "{{ nginx_static_html_dir }}/static_html/{{ item }}.html"
    mode: 0550
    owner: www-data
  with_items:
    - maintenance
    - forbidden
    - error_451

- name: Create the simple files folder
  file:
    path: "{{ nginx_static_html_dir }}/simple_files"
    mode: 0550
    owner: www-data
    group: www-data
    state: directory

- name: Copy simple files
  copy:
    src: "{{ item.filename }}"
    dest: "{{ nginx_static_html_dir }}/simple_files/{{ item.filename }}"
    mode: 0550
    owner: www-data
    group: www-data
  with_items: "{{ simple_files }}"
  tags:
    - nginx

- name: Setup bad referrer redirect
  copy:
    src: bad_referrer.html
    mode: 0550
    owner: www-data
    group: www-data
    dest: "{{ nginx_static_html_dir }}/simple_files/bad_referrer.html"

- name: Ensure that the default site is disabled
  file: path=/etc/nginx/sites-enabled/default state=absent
  notify: reload nginx

- name: Ensure that the application site is enabled
  file:
    src: "/etc/nginx/sites-available/{{ application_name }}"
    dest: "/etc/nginx/sites-enabled/{{ application_name }}"
    state: link
  notify: reload nginx
  tags:
    - nginx

- import_tasks: 'setup_htaccess.yml'
  when: inventory_hostname in groups['web']

- name: Ensure Nginx service is started
  service:
    name: nginx
    state: started
    enabled: yes
  tags:
    - nginx

- name: configure http, https ports in firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
  - http
  - https
