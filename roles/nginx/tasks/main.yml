---
- name: Import install.yml
  ansible.builtin.import_tasks: "install.yml"

- name: Check if HTTPS certificates exist
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ item }}/{{ letsencrypt_cert_filename }}"
  register: https_cert_check
  with_items: "{{ https_domains }}"
  tags:
    - nginx
    - config_update

- name: Set HTTPS certificate facts
  ansible.builtin.set_fact:
    active_https_domains: "{{ active_https_domains | default({}) | combine({item.item: item.stat.exists}) }}"
  with_items: "{{ https_cert_check.results }}"
  tags:
    - nginx
    - config_update

- name: "Active https domains"
  ansible.builtin.debug:
    var: active_https_domains

- name: Create the Nginx web configuration file
  ansible.builtin.template:
    src: nginx_web_config.j2
    dest: "/etc/nginx/sites-available/{{ application_name }}"
    mode: "0600"
    backup: true
  notify: reload nginx
  when: inventory_hostname in groups['web']
  tags:
    - nginx
    - config_update

- name: Create Nginx CMS configuration file
  ansible.builtin.template:
    src: nginx_cms_config.j2
    dest: "/etc/nginx/sites-available/{{ item.domain }}"
    mode: "0600"
    backup: true
  notify: reload nginx
  with_items: "{{ cms_sites }}"
  when: inventory_hostname in groups['web']
  tags:
    - nginx
    - config_update

- name: Create the Nginx media configuration file
  ansible.builtin.template:
    src: nginx_media_config.j2
    dest: "/etc/nginx/sites-available/{{ application_name }}"
    mode: "0644"
    backup: true
  notify: reload nginx
  when: inventory_hostname in groups['media']
  tags:
    - nginx

- name: Create the Nginx monitor proxy configuration file
  ansible.builtin.template:
    src: nginx_monitor_proxy_config.j2
    dest: "/etc/nginx/sites-available/monitor.conf"
    mode: "0644"
    backup: true
  notify: reload nginx
  when: "'monitor' in groups and inventory_hostname in groups['monitor']"
  tags:
    - nginx

- name: Create the Nginx pixel configuration file
  ansible.builtin.template:
    src: nginx_pixel_config.j2
    dest: "/etc/nginx/sites-available/pixel.conf"
    mode: "0644"
    backup: true
  notify: reload nginx
  when: inventory_hostname in groups['pixel']
  tags:
    - nginx

- name: "Create the Nginx pixel log file"
  ansible.builtin.file:
    path: "{{ nginx_pixel_log_file }}"
    state: touch
    mode: "0550"
    owner: www-data
    group: www-data
    access_time: preserve
    modification_time: preserve
  register: pixel_log
  when: inventory_hostname in groups['pixel']
  tags:
    - nginx

- name: Make sure pixel log permission is set
  ansible.posix.acl:
    path: "{{ nginx_pixel_log_file }}"
    entity: "{{ gunicorn_user }}"
    etype: user
    permissions: r
    state: present
  when: pixel_log is not skipped and inventory_hostname in groups['pixel']
  ignore_errors: "{{ ansible_check_mode }}"

- name: Set nginx logrotate settings
  ansible.builtin.lineinfile:
    path: "/etc/logrotate.d/nginx"
    regex: "^(#)?\\s*{{ item.key }}"
    line: "        {{ item.key }} {{ item.value }}"
    state: present
  loop:
    - key: "rotate"
      value: "{{ nginx_log_retention_days }}"
  tags:
    - nginx
  notify:
    - reload nginx
  when: inventory_hostname in groups['web']

- name: Create custom nginx log rotation file
  ansible.builtin.template:
    src: "nginx_logrotate.j2"
    dest: "/etc/logrotate.d/{{ application_name }}_nginx"
    mode: "0600"
    backup: true
  when: inventory_hostname in groups['web']

- name: Create the static_html folder
  ansible.builtin.file:
    path: "{{ nginx_static_html_dir }}/static_html"
    mode: "0550"
    owner: www-data
    state: directory
  when: inventory_hostname in groups['web']

- name: Create maintenance page
  ansible.builtin.template:
    src: "{{ item }}.html.j2"
    dest: "{{ nginx_static_html_dir }}/static_html/{{ item }}.html"
    mode: "0550"
    owner: www-data
  with_items:
    - maintenance
    - forbidden
    - error_451
  when: inventory_hostname in groups['web']

- name: Create the simple files folder
  ansible.builtin.file:
    path: "{{ nginx_static_html_dir }}/simple_files"
    mode: "0750"
    owner: "{{ gunicorn_user }}"
    group: www-data
    state: directory
  when: inventory_hostname in groups['web']
  tags:
    - nginx

- name: Copy simple files
  ansible.builtin.copy:
    src: "{{ item.filename }}"
    dest: "{{ nginx_static_html_dir }}/simple_files/{{ item.filename }}"
    mode: "0550"
    owner: www-data
    group: www-data
  with_items: "{{ simple_files }}"
  when: inventory_hostname in groups['web'] and not "nocopy" in item
  tags:
    - nginx

- name: Setup bad referrer redirect
  ansible.builtin.copy:
    src: bad_referrer.html
    mode: "0550"
    owner: www-data
    group: www-data
    dest: "{{ nginx_static_html_dir }}/simple_files/bad_referrer.html"
  when: inventory_hostname in groups['web']

- name: Ensure that the application site is enabled
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ application_name }}"
    dest: "/etc/nginx/sites-enabled/{{ application_name }}"
    state: link
  notify: reload nginx
  when: inventory_hostname in groups['web'] or inventory_hostname in groups['media']
  tags:
    - nginx

- name: Ensure that the monitor site is enabled
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/monitor.conf"
    dest: "/etc/nginx/sites-enabled/monitor.conf"
    state: link
  notify: reload nginx
  when: "'monitor' in groups and inventory_hostname in groups['monitor']"
  tags:
    - nginx

- name: Ensure that the CMS sites are enabled
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ item.domain }}"
    dest: "/etc/nginx/sites-enabled/{{ item.domain }}"
    state: link
  notify: reload nginx
  with_items: "{{ cms_sites }}"
  when: "inventory_hostname in groups['web']"
  tags:
    - nginx

- name: Ensure that the pixel site is enabled
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/pixel.conf"
    dest: "/etc/nginx/sites-enabled/pixel.conf"
    state: link
  notify: reload nginx
  when: "inventory_hostname in groups['web']"
  tags:
    - nginx

- name: Import setup_htaccess.yml
  ansible.builtin.import_tasks: "setup_htaccess.yml"
  when: inventory_hostname in groups['web']

- name: Create sitemap tempdir
  ansible.builtin.file:
    path: "/tmp/fds_sitemaps/"
    state: directory
    mode: "0750"
    owner: "{{ gunicorn_user }}"
    group: "{{ gunicorn_user }}"
  when: inventory_hostname in groups['web']
  tags:
    - nginx

- name: Create update-sitemaps script
  ansible.builtin.template:
    src: update-sitemaps.sh.j2
    dest: "{{ virtualenv_path }}/scripts/update-sitemaps.sh"
    mode: "0750"
    owner: "{{ gunicorn_user }}"
    group: "www-data"
  when: inventory_hostname in groups['web']
  tags:
    - nginx

- name: cron task to update sitemaps
  ansible.builtin.cron:
    name: "sitemaps autoupdate"
    minute: "11"
    hour: "*"
    user: "{{ gunicorn_user }}"
    job: "{{ virtualenv_path }}/scripts/update-sitemaps.sh > /tmp/update_sitemaps.log 2>&1"
  when: inventory_hostname in groups['web']
  tags:
    - nginx
