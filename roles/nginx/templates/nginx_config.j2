map $sent_http_content_type $expires {
    default                     off;
    text/html                   epoch;
    text/css                    max;
    application/javascript      max;
    application/x-font-ttf      max;
    font/opentype               max;
    application/font-woff       max;
    application/font-woff2      max;
    application/pdf             max;
    ~image/                     max;
}

map $sent_http_content_type $media_expires {
    default                     off;
    text/html                   epoch;
    application/pdf             off;
    ~image/                     max;
}

map $request_uri $csp_header {
    default "{% for k, v in content_security_policy.items() %}{{ k }} {{ v }};{% endfor %}";
    {% for override in content_security_policy_overrides %}
    "{{ override.url }}" "{% for k, v in content_security_policy.items() %}{{ k }} {% if k in override.directives %}{{ override.directives[k] }}{% else %}{{ v }}{% endif %};{% endfor %}";
    {% endfor %}
}

map $http_referer $bad_referrer {
    default                  0;
    {% for domain in bad_referrers %}
    "~{{ domain.from }}"          "{{ domain.to }}";
    {% endfor %}
}

upstream {{ application_name }}_wsgi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ virtualenv_path }}/run/gunicorn.sock fail_timeout=0;
}


{% if redirect_domains is defined %}
    {% for redirect_domain in redirect_domains %}
    server {
        if ($host = {{ redirect_domain.from }}) {
            return 301 https://{{ redirect_domain.domain }}$request_uri;
        }

        listen 80;
        listen [::]:80;
        server_name {{ redirect_domain.from }};

        return 404; # managed by Certbot
    }
    {% endfor %}
{% endif %}


server {
    listen 80;
    server_name localhost 127.0.0.1;
    location /nginx_status {
        stub_status;
        allow 127.0.0.1;        # only allow requests from localhost
        deny all;               # deny all other hosts
    }
}


server {
    listen      80;
    listen [::]:80;
    server_name {{ web_server_name }} www.{{ web_server_name }};
    rewrite     ^ https://{{ web_server_name }}$request_uri? permanent;
}

server {
    listen      443 ssl http2;
    listen [::]:443 ssl http2;
    server_name         www.{{ web_server_name }};
    {% with server_name = web_server_name %}
        {% include '_ssl.j2' %}
    {% endwith %}

    rewrite     ^ https://{{ web_server_name }}$request_uri? permanent;
}

{% macro csp(csp_list) -%}{% for v in csp_list %}{{ v }};{% endfor %}{%- endmacro %}
{% macro csp_block(csp_list) -%}
    add_header Content-Security-Policy "{{ csp(csp_list) }}";
    add_header X-Content-Security-Policy "{{ csp(csp_list) }}";
    add_header X-WebKit-CSP "{{ csp(csp_list) }}";
{%- endmacro %}

{% macro cors(domain) -%}if ($http_origin ~* (^https://{{ domain }}(:[0-9]+)?$)) {
                add_header Access-Control-Allow-Origin $http_origin;
                add_header Access-Control-Allow-Headers "pragma, cache-control";
        }{%- endmacro %}
{% macro basic_auth(realm) -%}
    auth_basic "Restricted";
    auth_basic_user_file {{ virtualenv_path}}/conf/htpasswd_{{ realm }};
{%- endmacro %}

{% macro proxy_upstream() -%}
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $host;
    proxy_pass http://{{ application_name }}_wsgi_server;
{%- endmacro %}

server {
    listen              443 ssl http2;
    listen         [::]:443 ssl http2;
    server_name         {{ web_server_name }};

    {% with server_name = web_server_name %}
        {% include '_ssl.j2' %}
    {% endwith %}
    add_header Referrer-Policy "same-origin";

    error_page 502 503 504 =503 /maintenance.html;
    location = /maintenance.html {
        root {{ virtualenv_path }}/static_html/;
    }

    {% if maintenance %}
        set $maintenance on;

        {% if maintenance_admin_ip %}
        if ($remote_addr ~ ({{ maintenance_admin_ip }})) {
            set $maintenance off;
        }
        {% endif %}
        if ($maintenance = on) {
            return 503;
        }
    {% endif %}

    expires $expires;

    client_max_body_size 50M;

    access_log {{ nginx_access_log_file }};
    error_log {{ nginx_error_log_file }};


    {% if redirect_paths is defined %}
        {% for redirect_path in redirect_paths %}
            location ~ {{ redirect_path.from }}(.*)$ {
              return 301 {{ redirect_path.path }}$1$is_args$args;
            }
        {% endfor %}
    {% endif %}

    {% for simple_file in simple_files %}
        location {{ simple_file.path }} {
            {% if simple_file.mimetype is defined %}
                add_header Content-Type "{{ simple_file.mimetype }}";
            {% endif %}
            alias {{ virtualenv_path }}/simple_files/{{ simple_file.filename }};
        }
    {% endfor %}

    if ($bad_referrer) {
        return 301 $bad_referrer;
    }

    location /favicon.ico {
        return 404;
    }

    location /static/ {
        rewrite     ^ https://{{ static_server_name }}$request_uri? permanent;
    }

    {% for dir in nginx_public_media %}
        location {{ dir }} {
            rewrite     ^ https://{{ media_server_name }}$request_uri? permanent;
        }
    {% endfor %}

    add_header Content-Security-Policy $csp_header;
    add_header X-Content-Security-Policy $csp_header;
    add_header X-WebKit-CSP $csp_header;

    {% for item in rate_limited_urls %}
        location {{ item.url }} {
            limit_req zone={{ item.zone }} burst=5 nodelay;
            {% if item.auth %}{{ basic_auth(item.auth) }}{% endif %}

            {{ proxy_upstream() }}
        }
    {% endfor %}

    {% for url_realm in protected_urls %}
        location {{ url_realm.url }} {
            {{ basic_auth(url_realm.realm) }}
            {{ cors(static_server_name) }}

            {{ proxy_upstream() }}
        }
    {% endfor %}

    {% for url in web_cors_for_media %}
        location {{ url }} {
            {{ cors(static_server_name) }}
            {{ cors(media_server_name) }}

            {{ proxy_upstream() }}
        }
    {% endfor %}

    location / {
        {{ cors(static_server_name) }}

        {{ proxy_upstream() }}
    }

    # Error pages
    error_page 500 /500.html;
    location = /500.html {
        root {{ project_path }}/{{ application_name }}/templates/;
    }
}

server {
    listen              443 ssl http2;
    listen         [::]:443 ssl http2;
    server_name         {{ media_server_name }};

    {% with server_name = media_server_name %}
        {% include '_ssl.j2' %}
    {% endwith %}

    {% if maintenance %}
        set $maintenance on;

        {% if maintenance_admin_ip %}
        if ($remote_addr ~ ({{ maintenance_admin_ip }})) {
            set $maintenance off;
        }
        {% endif %}
        if ($maintenance = on) {
            return 503;
        }
    {% endif %}

    expires $media_expires;

    if ($bad_referrer) {
        return 301 $bad_referrer;
    }

    error_page 403 /forbidden.html;
    proxy_intercept_errors on;

    location = /forbidden.html {
        root {{ virtualenv_path }}/static_html/;
    }

    error_page 451 =451 /error_451.html;
    location = /error_451.html {
        add_header Link '<https://fragdenstaat.de/zensurheberrecht>; rel="blocked-by"' always;
        root {{ virtualenv_path }}/static_html/;
    }

    {% if media_legal_paths is defined %}
        {% for legal_info in media_legal_paths %}
            location ~ {{ legal_info.path }}(.*)$ {
              return 451;
            }
        {% endfor %}
    {% endif %}

    {% if media_redirect_paths is defined %}
        {% for redirect_path in media_redirect_paths %}
            location ~ {{ redirect_path.from }}(.*)$ {
              return 301 {{ redirect_path.path }}$1$is_args$args;
            }
        {% endfor %}
    {% endif %}

    {% for prefix in nginx_private_media_prefix %}
        location {{ prefix.url }} {
            {{ csp_block(media_content_security_policy) }}

            {{ cors(static_server_name) }}
            {{ cors(web_server_name) }}

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Host $host;

            proxy_pass http://{{ application_name }}_wsgi_server;
            proxy_hide_header Set-Cookie;
        }
    {% endfor %}

    {% for url_dir in nginx_private_media %}
        location {{ url_dir.url }} {
            internal;

            set $link "$upstream_http_link";
            add_header Link $link;

            {% if url_dir.force_download is defined and url_dir.force_download %}
              add_header Content-disposition "attachment";
            {% endif %}

            {{ cors(static_server_name) }}
            {{ cors(web_server_name) }}
            proxy_hide_header Set-Cookie;
            alias {{ nginx_private_media_path }}{{ url_dir.dir }};
        }
    {% endfor %}

    {% for dir in nginx_public_media %}
        location {{ dir }} {
            {{ csp_block(media_content_security_policy) }}
            {{ cors(static_server_name) }}
            {{ cors(web_server_name) }}

            alias   {{ nginx_media_dir }}{{ dir }};
        }
    {% endfor %}

    {# privileged media has a CSP like web server #}
    {% for dir in nginx_public_privileged_media %}
        location {{ dir }} {
            {{ csp_block(priviliged_media_content_security_policy) }}
            {{ cors(static_server_name) }}
            {{ cors(web_server_name) }}

            alias   {{ nginx_media_dir }}{{ dir }};
        }
    {% endfor %}
}

server {
    listen              443 ssl http2;
    listen         [::]:443 ssl http2;
    server_name         {{ static_server_name }};

    {% with server_name = static_server_name %}
        {% include '_ssl.j2' %}
    {% endwith %}

    expires $expires;

    location /static/ {
        {{ csp_block(static_content_security_policy) }}
        add_header Access-Control-Allow-Origin https://fragdenstaat.de;

        alias   {{ nginx_static_dir }};
    }
    {% for simple_file in simple_files %}
        location {{ simple_file.path }} {
            {% if simple_file.mimetype is defined %}
                add_header Content-Type "{{ simple_file.mimetype }}";
            {% endif %}
            alias {{ virtualenv_path }}/simple_files/{{ simple_file.filename }};
        }
    {% endfor %}
}

server {
    listen              443 ssl http2;
    listen         [::]:443 ssl http2;
    server_name         {{ mail_domain }};

    {% with server_name = mail_domain %}
        {% include '_ssl.j2' %}
    {% endwith %}

}

