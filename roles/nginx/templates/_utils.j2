{% macro basic_auth(realm) -%}
    auth_basic "Restricted";
    auth_basic_user_file {{ virtualenv_path}}/conf/htpasswd_{{ realm }};
{%- endmacro %}

{% macro hsts_header() -%}
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
{%- endmacro %}

{% macro proxy_wsgi_upstream() -%}
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $host;
    proxy_pass http://{{ wsgi_app_name|default(application_name) }}_wsgi_server;
{%- endmacro %}

{% macro proxy_asgi_upstream() -%}
    proxy_read_timeout 36000s;
    proxy_connect_timeout 36000s;
    proxy_send_timeout 36000s;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_buffering off;
    proxy_redirect off;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $host;
    proxy_pass http://{{ asgi_app_name|default(application_name) }}_asgi_server;
{%- endmacro %}

{% macro cors(server_url, null_fallback=False, repeat_headers="") -%}
    {% if "http" not in server_url %}
        {# Raise exception if not given a proper URL #}
        {{ 0/0 }}
    {% endif %}
    if ($http_origin ~* (^{{ server_url|replace(".", "\\.") }}$)) {
        add_header Access-Control-Allow-Origin $http_origin;
        add_header Access-Control-Allow-Headers "pragma, cache-control";
        add_header Vary "Origin, Access-Control-Request-Headers, Access-Control-Request-Method";
        {{ repeat_headers }}
    }
    {% if null_fallback and ".onion" in server_url %}
        if ($http_origin = 'null') {
            add_header Access-Control-Allow-Origin {{ server_url }};
            add_header Access-Control-Allow-Headers "pragma, cache-control";
            add_header Vary "Origin, Access-Control-Request-Headers, Access-Control-Request-Method";            
            {{ repeat_headers }}
        }
    {% endif %}
{%- endmacro %}

{% macro csp_value(csp_value, web=web_server_url, media=media_server_url, static=static_server_url, wsweb=wsweb_server_url) -%}{{ csp_value | regex_replace('__web__', web) | regex_replace('__media__', media) | regex_replace('__static__', static) | regex_replace('__wsweb__', wsweb) }};{%- endmacro %}

{% macro csp(csp_list, web=web_server_url, media=media_server_url, static=static_server_url, wsweb=wsweb_server_url) -%}{% for v in csp_list %}{{ csp_value(v, web=web, media=media, static=static, wsweb=wsweb) }}{% endfor %}{%- endmacro %}

{% macro csp_block(csp_list, web=web_server_url, media=media_server_url, static=static_server_url, wsweb=wsweb_server_url) -%}
    add_header Content-Security-Policy "{{ csp(csp_list, web=web, media=media, static=static, wsweb=wsweb) }}";
{%- endmacro %}

{% macro csp_header_map(header_var='csp_header', web=web_server_url, media=media_server_url, static=static_server_url, wsweb=wsweb_server_url) %}
map $request_uri ${{ header_var }} {
    default "{% for k, v in content_security_policy.items() %}{{ k }} {{ csp_value(v, web=web, media=media, static=static) }}{% endfor %}";
    {% for override in content_security_policy_overrides %}
    "{{ override.url }}" "{% for k, v in content_security_policy.items() %}{{ k }} {% if k in override.directives %}{{ csp_value(override.directives[k], web=web, media=media, static=static, wsweb=wsweb) }}{% else %}{{ csp_value(v, web=web, media=media, static=static, wsweb=wsweb) }}{% endif %}{% endfor %}";
    {% endfor %}
}
{% endmacro %}
