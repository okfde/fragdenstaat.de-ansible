---

- name: Create the meta data directory
  ansible.builtin.file:
    path: "{{ virtualenv_path }}/meta"
    owner: "{{ gunicorn_user }}"
    group: "{{ gunicorn_group }}"
    mode: "0774"
    state: directory
  tags:
    - release

- name: Create repo directory
  ansible.builtin.file:
    path: "{{ project_path }}"
    state: directory
    owner: "{{ gunicorn_user }}"
    group: "{{ gunicorn_group }}"
    mode: "0755"

- name: Check that repo is already setup
  ansible.builtin.stat:
    path: "{{ project_path }}/.git"
  register: repo_setup

- name: Record previous git info
  ansible.builtin.shell: git -C {{ project_path }} rev-parse HEAD > {{ virtualenv_path }}/meta/{{ application_name }}.gitsha
  become: true
  become_user: "{{ gunicorn_user }}"
  when: collect_release_info and repo_setup.stat.exists
  tags:
    - release
    - skip_ansible_lint
  changed_when: false

- name: Record deployment start timestamp
  ansible.builtin.shell: date -Iseconds > {{ virtualenv_path }}/meta/deployment_start
  when: collect_release_info and repo_setup.stat.exists
  changed_when: false
  tags:
    - release

# clean node_modules for pnpm migration
- name: Check if yarn.lock exists
  ansible.builtin.stat:
    path: "{{ project_path }}/yarn.lock"
  register: yarn_lock

- name: Delete node_modules if yarn.lock is present
  ansible.builtin.command: rm -rf node_modules
  args:
    chdir: "{{ project_path }}"
  when: yarn_lock.stat.exists
  tags: git
  changed_when: false

- name: Setup the Git repo
  ansible.builtin.git:
    repo: "{{ git_repo }}"
    version: "{{ git_branch }}"
    dest: "{{ project_path }}"
    accept_hostkey: true
    update: true
    force: true
  become: true
  become_user: "{{ gunicorn_user }}"
  tags: git
  notify:
    - Trigger release notification

- name: Delete all .pyc files
  ansible.builtin.command: find . -name '*.pyc' -delete
  args:
    chdir: "{{ project_path }}"
  tags: git
  changed_when: false
