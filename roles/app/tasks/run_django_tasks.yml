---

- name: Check for Django database migrations
  community.general.django_manage:
    command: "migrate --noinput --plan"
    app_path: "{{ project_path }}"
    virtualenv: "{{ virtualenv_path }}"
    settings: "{{ django_settings_file }}"
  environment: "{{ django_environment }}"
  tags:
    - deploy
    - deploy-backend
    - deploy-web
    - deploy-frontend
    - django.migrate
    - skip_ansible_lint
  become: true
  become_user: "{{ gunicorn_user }}"
  changed_when: false
  failed_when: false
  register: migrate_check_result

- name: Set needs db migration fact
  ansible.builtin.set_fact:
    needs_db_migration: "{{ 'No planned migration operations.' not in migrate_check_result.out }}"
  tags:
    - deploy
    - deploy-backend
    - deploy-web
    - deploy-frontend
    - django.migrate
  when: not ansible_check_mode

- name: Set needs db migration fact to true when rebuilding reporting views
  ansible.builtin.set_fact:
    needs_db_migration: true
  tags:
    - reporting-views

- name: Import migrate_db.yml
  ansible.builtin.import_tasks: migrate_db.yml
  when: needs_db_migration is defined and not ansible_check_mode
  tags:
    - deploy
    - deploy-backend
    - deploy-web
    - deploy-frontend
    - django.migrate

- name: Run Django compilemessages
  ansible.builtin.command: "{{ virtualenv_path }}/bin/python {{ virtualenv_path }}/fragdenstaat.de/manage.py compilemessages -l de --ignore **node_modules/**"
  args:
    chdir: "{{ virtualenv_path }}"
  environment: "{{ django_environment }}"
  register: compile_result
  changed_when: "'processing file' in compile_result.stdout"
  become: true
  become_user: "{{ gunicorn_user }}"
  tags:
    - django.compilemessages
    - deploy-web
    - deploy-backend
  ignore_errors: true

- name: Set site domain
  community.general.postgresql_query:
    db: "fragdenstaat_de"
    query: "UPDATE django_site SET domain = '{{ domain_name }}' WHERE id = 1 AND name = 'FragDenStaat';"
  become_user: postgres
  become: true
  changed_when: false
  tags:
    - setsitedomain
