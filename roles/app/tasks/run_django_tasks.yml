---

- name: Save django db user name
  ansible.builtin.set_fact:
    django_environment_db_user: "{{ django_environment['DATABASE_USER'] }}"
  tags:
    - django.migrate
    - deploy-web
    - deploy-backend

- name: Save django db user password
  ansible.builtin.set_fact:
    django_environment_db_password: "{{ django_environment['DATABASE_PASSWORD'] }}"
  tags:
    - django.migrate
    - deploy-web
    - deploy-backend

- name: Overwrite django db user
  ansible.builtin.set_fact:
    django_environment: "{{ django_environment | combine({'DATABASE_USER': 'django_migrations'}) }}"
  tags:
    - django.migrate
    - deploy-web
    - deploy-backend

- name: Overwrite django db user password
  ansible.builtin.set_fact:
    django_environment: "{{ django_environment | combine({'DATABASE_PASSWORD': '{{ django_migrations_db_password }}'}) }}"
  tags:
    - django.migrate
    - deploy-web
    - deploy-backend

- name: "Reassign all object in database owned by db_user to django_migrations"
  community.postgresql.postgresql_owner:
    db: "{{ db_name }}"
    new_owner: django_migrations
    reassign_owned_by: "{{ django_environment_db_user }}"
  tags:
    - django.migrate
    - deploy-web
    - deploy-backend
  become: true
  become_user: postgres

- name: Run Django database migrations
  community.general.django_manage:
    command: "migrate --noinput"
    app_path: "{{ project_path }}"
    virtualenv: "{{ virtualenv_path }}"
    settings: "{{ django_settings_file }}"
  environment: "{{ django_environment }}"
  tags:
    - django.migrate
    - deploy-web
    - deploy-backend
  become: true
  become_user: "{{ gunicorn_user }}"
  notify:
    - restart celery workers
    - set db access rights
  changed_when: true
  when: true

- name: Run Django compilemessages
  ansible.builtin.command: "{{ virtualenv_path }}/bin/python {{ virtualenv_path }}/fragdenstaat.de/manage.py compilemessages -l de --ignore **node_modules/**"
  args:
    chdir: "{{ virtualenv_path }}"
  environment: "{{ django_environment }}"
  register: compile_result
  changed_when: "'processing file' in compile_result.stdout"
  become: true
  become_user: "{{ gunicorn_user }}"
  tags:
    - django.compilemessages
    - deploy-web
    - deploy-backend

- name: Restore django environment db user
  ansible.builtin.set_fact:
    django_environment: "{{ django_environment | combine({'DATABASE_USER': '{{ django_environment_db_user }}'}) }}"
  tags:
    - django.migrate
    - deploy-web
    - deploy-backend

- name: Restore django environment db user password
  ansible.builtin.set_fact:
    django_environment: "{{ django_environment | combine({'DATABASE_PASSWORD': '{{ django_environment_db_password }}'}) }}"
  tags:
    - django.migrate
    - deploy-web
    - deploy-backend

- name: Set site domain
  community.general.postgresql_query:
    db: "fragdenstaat_de"
    query: "UPDATE django_site SET domain = '{{ domain_name }}' WHERE id = 1 AND name = 'FragDenStaat';"
  become_user: postgres
  become: true
  changed_when: false
  tags:
    - setsitedomain
