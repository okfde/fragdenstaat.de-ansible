---
virtualenv_python_version: python3.10

git_branch: main

poppler_version: 0.89.0

celery_broker_url: "amqp://{{ rabbitmq_application_user }}:{{ rabbitmq_application_password }}@localhost/{{ rabbitmq_application_vhost }}"

db_reporting_views:
  - name: donations
    query: |
      SELECT
        public.fds_donation_donation.id as id,
        public.fds_donation_donation.timestamp,
        public.fds_donation_donation.completed,
        public.fds_donation_donation.amount,
        public.fds_donation_donation.reference,
        public.fds_donation_donation.donor_id,
        public.fds_donation_donation.purpose,
        public.fds_donation_donation.method,
        public.fds_donation_donation.received_timestamp,
        (public.fds_donation_donation.recurrence_id IS NOT NULL) AS recurring,
        public.fds_donation_donation.recurrence_id,
        public.fds_donation_donation.amount_received,
        public.fds_donation_donation.first_recurring,
        public.fds_donation_donation.keyword,
        public.fds_donation_donation.form_url,
        public.fds_donation_donation.data,
        public.fds_donation_donation.number,
        public.fds_donation_donation.project,
        public.froide_payment_payment.status AS payment_status,
        public.froide_payment_order.subscription_id AS subscription_id,
        (public.fds_donation_donation.received_timestamp IS NOT NULL OR (
                  (fds_donation_donation.method = 'banktransfer' AND date_trunc('month', fds_donation_donation.timestamp) > (now() - '35 days'::interval))
                OR (fds_donation_donation.method = 'sepa' AND fds_donation_donation.timestamp > (now() - '7 days'::interval))
                )) AS receiving
      FROM
        public.fds_donation_donation
        LEFT OUTER JOIN public.froide_payment_payment ON public.fds_donation_donation.payment_id = public.froide_payment_payment.ID
        LEFT OUTER JOIN public.froide_payment_order ON public.fds_donation_donation.order_id = Public.froide_payment_order.id
  - name: donation_form_views
    query: "SELECT path, reference, date, count, last_updated FROM public.fds_donation_donationformviewcount"
  - name: subscriptions
    query: "SELECT froide_payment_subscription.id AS id, froide_payment_subscription.created AS created, last_date, next_date, canceled, public.froide_payment_plan.amount AS amount, public.froide_payment_plan.interval AS interval, public.froide_payment_plan.amount_year AS amount_year, public.froide_payment_plan.provider as provider, donor_id FROM public.froide_payment_subscription LEFT OUTER JOIN public.froide_payment_plan ON public.froide_payment_subscription.plan_id = public.froide_payment_plan.id LEFT OUTER JOIN public.fds_donation_donor_subscriptions ON public.fds_donation_donor_subscriptions.subscription_id = public.froide_payment_subscription.id"
  - name: donors
    query: "SELECT id, city, postcode, country, first_donation, email_confirmed, contact_allowed, become_user, receipt, recurring_amount, subscriber_id FROM public.fds_donation_donor"
  - name: recurrences
    query: |
      SELECT
        public.fds_donation_recurrence.id,
        public.fds_donation_recurrence.active,
        public.fds_donation_recurrence.donor_id,
        public.fds_donation_recurrence.subscription_id,
        public.fds_donation_recurrence.method,
        public.fds_donation_recurrence.start_date,
        public.fds_donation_recurrence.interval,
        public.fds_donation_recurrence.amount,
        public.fds_donation_recurrence.amount / public.fds_donation_recurrence.interval as amount_month,
        public.fds_donation_recurrence.cancel_date,
        fds_donation_donation.reference,
        fds_donation_donation.purpose,
        fds_donation_donation.keyword,
        fds_donation_donation.form_url,
        fds_donation_donation.data
      FROM
        public.fds_donation_recurrence
        JOIN (
          SELECT DISTINCT
            ON (fds_donation_donation.recurrence_id) *
          FROM
            public.fds_donation_donation
          ORDER BY
            fds_donation_donation.recurrence_id,
            COALESCE(
              fds_donation_donation.received_timestamp,
              fds_donation_donation.timestamp
            ) ASC
        ) fds_donation_donation ON fds_donation_donation.recurrence_id = public.fds_donation_recurrence.id
      WHERE
        public.fds_donation_recurrence.project = 'FDS'
        AND (fds_donation_recurrence.active OR (
            (fds_donation_recurrence.method = 'banktransfer' and date_trunc('month', fds_donation_recurrence.start_date) > (now() - '35 days'::interval))
          OR (fds_donation_recurrence.method = 'sepa' and fds_donation_recurrence.start_date > (now() - '7 days'::interval))
          ))
  - name: subscribers
    query: "SELECT id, created, subscribed, unsubscribed, reference, keyword, newsletter_id, unsubscribe_method, unsubscribe_reference FROM public.fds_newsletter_subscriber"
  - name: foirequests
    query: "SELECT id, title, slug, public_body_id, user_id, created_at, resolved_on, due_date, costs, refusal_reason, public, status, visibility, law_id, is_foi, same_as_id, same_as_count, jurisdiction_id, resolution, reference, project_id, closed, campaign_id, language FROM public.foirequest_foirequest"
  - name: documents
    query: "SELECT id, title, slug, description, num_pages, language, public, publicbody_id, foirequest_id, file_size, pending, properties, data, content_hash FROM public.document_document"
  - name: articles
    query: "SELECT id, title, slug, status, creation_date, start_publication, language FROM public.fds_blog_article"
  - name: publicbodies
    query: "SELECT id, name, other_names, slug, description, parent_id, root_id, depth, classification_id, email, fax, contact, address, request_note, source_reference, alternative_emails, extra_data, change_history, file_index, org_chart, created_at, updated_at, confirmed, wikidata_item, jurisdiction_id, geo FROM public.publicbody_publicbody"
  - name: newsletter_feedback
    query: "SELECT id, created, reason, comment, newsletter_id FROM public.fds_newsletter_unsubscribefeedback"
  - name: problemreports
    query: "SELECT id, kind, timestamp, auto_submitted, resolved, message_id, user_id, resolution_timestamp, moderator_id, escalated FROM public.problem_problemreport"
  - name: mailings
    query: |
      WITH mailing_count AS (
        SELECT mailing_id,
          COUNT(*) AS recipient_count,
          COUNT(*) FILTER (WHERE bounced IS TRUE) AS bounced_count
        FROM fds_mailing_mailingmessage
        WHERE sent IS NOT NULL
        GROUP BY mailing_id
      ),
      segments AS (
        SELECT
        mailing_id,
        string_agg(fds_newsletter_segment.name::text, ',') AS segment_list
        FROM fds_newsletter_segment
        JOIN fds_mailing_mailing_segments ON fds_newsletter_segment.id = fds_mailing_mailing_segments.segment_id
        GROUP BY fds_mailing_mailing_segments.mailing_id
      ),
      unsubscribes AS (
        SELECT
        unsubscribe_reference as mailing_ident,
        COUNT(*) as unsubscribe_count
        FROM fds_newsletter_subscriber
        WHERE unsubscribed IS NOT NULL
        AND unsubscribe_reference LIKE 'mailing-%'
        GROUP BY unsubscribe_reference
      ),
      clicks AS (
        SELECT
        reference AS mailing_ident,
        SUM(count) AS click_count
        FROM fds_donation_donationformviewcount
        GROUP BY reference
      ),
      mailings AS (
        SELECT
          *,
          'mailing-' || COALESCE(to_char(sending_date AT TIME ZONE 'UTC', 'YYYYMMDDHH24MI'), '') || '-' || fds_mailing_mailing.id AS mailing_ident
        FROM fds_mailing_mailing
      )
      SELECT
        mailings.id,
        mailings.mailing_ident,
        newsletter_id,
        fds_newsletter_newsletter.title as newsletter_title,
        COALESCE(segments.segment_list, '') AS segment_list,
        mailings.name AS name,
        mailings.sender_name,
        mailings.sender_email,
        mailings.created AS created,
        sending_date,
        sent_date,
        open_count,
        open_log_timestamp,
        fds_mailing_emailtemplate.subject,
        fds_mailing_emailtemplate.preheader,
        mailing_count.recipient_count,
        mailing_count.bounced_count,
        COALESCE(clicks.click_count, 0) AS click_count,
        COALESCE(unsubscribe_count, 0) AS unsubscribe_count,
        open_count::decimal / NULLIF(mailing_count.recipient_count::decimal, 0) AS open_rate,
        COALESCE(clicks.click_count, 0)::decimal / NULLIF(mailing_count.recipient_count::decimal, 0) AS click_rate,
        COALESCE(unsubscribe_count, 0)::decimal / NULLIF(mailing_count.recipient_count::decimal, 0) AS unsubscribe_rate,
        mailing_count.bounced_count::decimal / NULLIF(mailing_count.recipient_count::decimal, 0) AS bounce_rate
      FROM mailings
      JOIN fds_mailing_emailtemplate ON fds_mailing_emailtemplate.id = mailings.email_template_id
      LEFT OUTER JOIN fds_newsletter_newsletter ON fds_newsletter_newsletter.id = mailings.newsletter_id
      JOIN mailing_count ON mailing_count.mailing_id = mailings.id
      LEFT OUTER JOIN segments ON segments.mailing_id = mailings.id
      LEFT OUTER JOIN unsubscribes ON unsubscribes.mailing_ident = mailings.mailing_ident
      LEFT OUTER JOIN clicks ON clicks.mailing_ident = mailings.mailing_ident
      WHERE submitted IS TRUE
