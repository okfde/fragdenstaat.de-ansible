- name: "Print VM info"
  ansible.builtin.debug:
    msg: "{{ item }}"

- name: Check if VM image exists
  ansible.builtin.stat:
    path: "/var/lib/libvirt/images/{{ item.name }}.qcow2"
    get_checksum: false
  register: vmdisk

- name: Create VM base image
  ansible.builtin.command:
    cmd: |
      qemu-img create -f qcow2 /var/lib/libvirt/images/{{ item.name }}.qcow2 {{ item.hdd }}
  when: "not vmdisk.stat.exists"
  changed_when: false

- name: Set file permissions
  ansible.builtin.file:
    path: "/var/lib/libvirt/images/{{ item.name }}.qcow2"
    owner: "libvirt-qemu"
    group: "kvm"
    mode: "0600"
  ignore_errors: "{{ ansible_check_mode }}"

- name: Resize VM image
  ansible.builtin.command:
    cmd: |
      virt-resize --expand /dev/sda1 /opt/qemu/isos/{{ item.os }}-server-cloudimg-amd64-disk-kvm.img /var/lib/libvirt/images/{{ item.name }}.qcow2
  when: "not vmdisk.stat.exists"
  changed_when: false
  ignore_errors: "{{ ansible_check_mode }}"

- name: Configure VM
  ansible.builtin.shell:
    cmd: |
      virt-customize -a "/var/lib/libvirt/images/{{ item.name }}.qcow2" \
        --hostname "{{ item.name }}" \
        --root-password "password:{{ vm_root_password }}" \
        --selinux-relabel --network \
        --copy-in "/opt/qemu/templates/50-cloud-init.yaml:/etc/netplan/" \
        --ssh-inject root:file:/opt/qemu/templates/id_fds.pub \
        --firstboot-command "chmod 600 /etc/netplan/50-cloud-init.yaml;netplan apply;ssh-keygen -A"
  when: "not vmdisk.stat.exists"
  changed_when: false
  ignore_errors: "{{ ansible_check_mode }}"

- name: Get VM list
  community.libvirt.virt:
    command: list_vms
  register: all_vms

- name: Define vm from xml and set autostart
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
    autostart: true
  when: "('list_vms' in all_vms) and (item.name not in all_vms.list_vms)"

- name: Start VM
  community.libvirt.virt:
    name: "{{ item.name }}"
    state: running
