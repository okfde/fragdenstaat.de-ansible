---

- name: create the dev cluster database
  ansible.builtin.command:
    cmd: "pg_createcluster -p {{ fdsbot_db_light_port }} {{ pg_version }} {{ fdsbot_db_light_clustername }}"
  become: true
  become_user: postgres
  args:
    creates: "/etc/postgresql/{{ pg_version }}/{{ fdsbot_db_light_clustername }}"

- name: Add fdsbot user to database
  community.postgresql.postgresql_user:
    port: "{{ fdsbot_db_light_port }}"
    name: "{{ fdsbot_user }}"
    role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE
    state: "present"
  become_user: postgres
  become: true

- name: Add django_migrations user to database
  community.postgresql.postgresql_user:
    port: "{{ fdsbot_db_light_port }}"
    name: "django_migrations"
    role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE
    state: "present"
  become_user: postgres
  become: true

- name: Add default user to database
  community.postgresql.postgresql_user:
    port: "{{ fdsbot_db_light_port }}"
    name: "{{ db_user }}"
    state: "present"
  become_user: postgres
  become: true

- name: Grant fdsbot user peer access to cluster
  community.postgresql.postgresql_pg_hba:
    dest: /etc/postgresql/{{ pg_version }}/{{ fdsbot_db_light_clustername }}/pg_hba.conf
    contype: local
    users: "{{ fdsbot_user }}"
    databases: "{{ item }}"
    method: peer
    state: present
  with_items:
    - "{{ fdsbot_db_light }}"
    - "{{ db_name }}"
  become: true

- name: ensures {{ fdsbot_backup_dir }}/conf dir exists
  file: 
    path: "{{ fdsbot_backup_dir }}"
    state: directory

- name: Set fdsbot light dump scripts
  ansible.builtin.template:
    src: dump_light.sh.j2
    dest: "{{ fdsbot_backup_dir }}/dump_light.sh"
    mode: "0744"
    owner: "{{ fdsbot_user }}"

- name: Create backup light cronjob
  ansible.builtin.cron:
    name: "Run backup light script"
    minute: "30"
    hour: "7"
    job: "bash {{ fdsbot_backup_dir }}/dump_light.sh"
    user: "{{ fdsbot_user }}"
  when: "not 'tst.okfn.de' in inventory_hostname"

- name: Set fdsbot light backup server systemd service
  ansible.builtin.template:
    src: fdsbot_backup_server.service.j2
    dest: /etc/systemd/system/fdsbot_backup_server.service
    mode: "0444"
  when: "not 'tst.okfn.de' in inventory_hostname"

- name: Start fdsbot_backup_server service
  ansible.builtin.systemd:
    name: fdsbot_backup_server
    state: started
    daemon_reload: true
  when: "not 'tst.okfn.de' in inventory_hostname"

- name: Allow light backup server on VPN IP
  community.general.ufw:
    rule: allow
    port: "{{ fdsbot_backup_serve_port }}"
    to_ip: "{{ vpn_network }}{{ host_data.vpn_peer_id }}"
    proto: tcp
  when: "not 'tst.okfn.de' in inventory_hostname"
