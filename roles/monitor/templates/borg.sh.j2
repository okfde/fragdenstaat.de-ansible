#!/bin/bash

BOOTUP=mono
RES_COL=70
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
MOVE_TO_TAB="echo -en \t\t\t\t\t"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"

export BORG_REPO="ssh://{{ borg_repo[inventory_hostname].user }}@{{ borg_repo[inventory_hostname].host }}:{{ borg_repo[inventory_hostname].port }}/./{{ borg_repo[inventory_hostname].path }}"
export BORG_PASSPHRASE="{{ backup_gpg_password }}"

echo_success() {
    [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
    [ "$BOOTUP" = "color" ] || $MOVE_TO_TAB
    echo -n "  ["
    [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
    echo -n $"  OK  "
    [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
    echo -n "]"
    echo -ne "\r"
    return 0
}

echo_failure() {
    [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
    [ "$BOOTUP" = "color" ] || $MOVE_TO_TAB
    echo -n "  ["
    [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
    echo -n $"FAILED"
    [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
    echo -n "]"
    echo -ne "\r"
    return 1
}

step() {
    echo -n "$@"

    echo "" >> /tmp/backup.log
    echo "$(date)" >> /tmp/backup.log
    echo "$*" >> /tmp/backup.log

    STEP_OK=0
    [[ -w /tmp ]] && echo $STEP_OK > /tmp/step.$$
}

try() {
    "$@" &>> /tmp/backup.log

    # Check if command failed and update $STEP_OK if so.
    local EXIT_CODE=$?

    if [[ $EXIT_CODE -ne 0 ]]; then
        STEP_OK=$EXIT_CODE
        [[ -w /tmp ]] && echo $STEP_OK > /tmp/step.$$

        if [[ -n $LOG_STEPS ]]; then
            local FILE=$(readlink -m "${BASH_SOURCE[1]}")
            local LINE=${BASH_LINENO[0]}

            echo "$FILE: line $LINE: Command \`$*' failed with exit code $EXIT_CODE." >> /tmp/backup.log
        fi
    fi

    return $EXIT_CODE
}

next() {
    [[ -f /tmp/step.$$ ]] && { STEP_OK=$(< /tmp/step.$$); rm -f /tmp/step.$$; }
    [[ $STEP_OK -eq 0 ]]  && echo_success || echo_failure
    echo

    return $STEP_OK
}

LOCKFILE="/var/lock/$(basename $0)"
LOCKFD=99

_lock()             { flock -$1 $LOCKFD; }
_no_more_locking()  { _lock u; _lock xn && rm -f $LOCKFILE; }
_prepare_locking()  { eval "exec $LOCKFD>\"$LOCKFILE\""; trap _no_more_locking EXIT; }

_prepare_locking

exlock_now()        { _lock xn; }  # obtain an exclusive lock immediately or fail
exlock()            { _lock x; }   # obtain an exclusive lock
shlock()            { _lock s; }   # obtain a shared lock
unlock()            { _lock u; }   # drop a lock
exerror()           { echo "$1";exit "${2:-1}"; }

exlock_now || exerror "ERROR: Lockfile exists, is there another instance already running? Exiting..."

do_cleanup () {
    echo "ERROR, exiting..."
    echo "Unmounting and removing snapshots"
{% for u in borg.snapshots %}
    /bin/umount {{ u.mnt }}
{% endfor %}
{% for l in borg.snapshots %}
    /sbin/lvremove {{ l.dev }}-snapshot -f
{% endfor %}

    echo ""
    echo "Logfile:"
    cat /tmp/backup.log
    rm /tmp/backup.log

    exit 2
}

#trap 'echo "ERROR: Backup interrupted"; do_cleanup error; exit 2' INT TERM # Gracefully quit on (any) error
trap 'echo "received signal to stop"; do_cleanup interrupted; exit 1' SIGQUIT SIGTERM SIGINT # Gracefully quit on break

echo "" > /tmp/backup.log

echo "Starting Backup $(date)"
echo "-------------------------------------------------------------------------------"
echo ""
step "Create mountpoints           "
{% for mk in borg.snapshots %}
  mkdir {{ mk.mnt }} -p || /bin/true
{% endfor %}
next

step "Create snapshots             "
{% for s in borg.snapshots %}
  try /sbin/lvcreate -l100%FREE -s -n {{ s.name }}-snapshot {{ s.dev }}
{% endfor %}
next

step "Mount snapshots              "
{% for m in borg.snapshots %}
  try /bin/mount {{ m.dev }}-snapshot {{ m.mnt }}
{% endfor %}
next

step "Create backup                "
  try /usr/bin/borg create ::{now} {{ borg.locations }} --show-rc
next

step "Umount and remove snapshots  "
{% for u in borg.snapshots %}
  try /bin/umount {{ u.mnt }}
{% endfor %}
{% for l in borg.snapshots %}
  try /sbin/lvremove {{ l.dev }}-snapshot -f
{% endfor %}
next

step "Prune backup generations     "
  try /usr/bin/borg prune --keep-daily=14 --show-rc
next

if (( $(date +"%u") == 1)); then
  step "Backup Check (verify)        "
    try /usr/bin/borg check --verify-data --show-rc
  next
else
  step "Backup Check (quick)         "
    try /usr/bin/borg check --show-rc
  next
fi

step "Removing lock                "
  try /usr/bin/borg break-lock
next

step "Exporting Repokey            "
  try /usr/bin/borg key export :: --paper
next

step "Backup List                  "
  try /usr/bin/borg list
next

step "Backup Info                  "
  try /usr/bin/borg info
next

echo ""
echo "-------------------------------------------------------------------------------"
echo "Logfile:"
cat /tmp/backup.log
rm /tmp/backup.log
echo "-------------------------------------------------------------------------------"
