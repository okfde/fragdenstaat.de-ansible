#!/bin/bash

BOOTUP=mono
LOGFILE="/var/log/borg.sh.log"
RES_COL=70
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"

export BORG_REPO="ssh://{{ backup_repo[inventory_hostname].user }}@{{ backup_repo[inventory_hostname].host }}:{{ backup_repo[inventory_hostname].port }}/./{{ backup_repo[inventory_hostname].path }}"
export BORG_PASSPHRASE="{{ backup_repo[inventory_hostname].repokey }}"

echo_success() {
    [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
    echo -n "  ["
    [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
    echo -n $"  OK  "
    [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
    echo -n "]"
    echo -ne "\r"
    curl -s -POST http://192.168.100.5:12201/gelf -p0 -d '{"host":"{{ inventory_hostname }}","facility":"borg","message":"'"${STEP_NAME}"'","status":"OK"}'
    return 0
}

echo_failure() {
    [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
    echo -n "  ["
    [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
    echo -n $"FAILED"
    [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
    echo -n "]"
    echo -ne "\r"
    curl -s -POST http://192.168.100.5:12201/gelf -p0 -d '{"host":"{{ inventory_hostname }}","facility":"borg","message":"'"${STEP_NAME}"'","status":"ERR"}'
    return 1
}

step() {
    echo -n "$@" | awk '{printf "%-'${RES_COL}'s", $0}'
    echo "" >> "${LOGFILE}"
    echo "$(date)" >> "${LOGFILE}"
    echo "$*" >> "${LOGFILE}"

    STEP_NAME="$@"
    STEP_START=$(date +"%s")

    STEP_OK=0
    STEP_NAME="$@"
    [[ -w /tmp ]] && echo $STEP_OK > /tmp/step.$$
}

try() {
    "$@" &>> "${LOGFILE}"

    # Check if command failed and update $STEP_OK if so.
    local EXIT_CODE=$?

    if [[ $EXIT_CODE -ne 0 ]]; then
        STEP_OK=$EXIT_CODE
        [[ -w /tmp ]] && echo $STEP_OK > /tmp/step.$$

        if [[ -n $LOG_STEPS ]]; then
            local FILE=$(readlink -m "${BASH_SOURCE[1]}")
            local LINE=${BASH_LINENO[0]}

            echo "$FILE: line $LINE: Command \`$*' failed with exit code $EXIT_CODE." >> "${LOGFILE}"
        fi
    fi

    return $EXIT_CODE
}

next() {
    [[ -f /tmp/step.$$ ]] && { STEP_OK=$(< /tmp/step.$$); rm -f /tmp/step.$$; }
    [[ $STEP_OK -eq 0 ]]  && echo_success || echo_failure
    echo

    STEP_END=$(date +"%s")
    STEP_TIME=$(( ${STEP_END} - ${STEP_START} ))
    STEP_NAME_SAVE=$(echo ${STEP_NAME} | sed 's/ //g' | sed 's/(//g' | sed 's/)//g' )
    echo "borg_${STEP_NAME_SAVE}_seconds{hostname=\"$(hostname)\"} ${STEP_TIME}" >> /var/log/borg_execution.log

    return $STEP_OK
}

LOCKFILE="/var/lock/$(basename $0)"
LOCKFD=99

_lock()             { flock -$1 $LOCKFD; }
_no_more_locking()  { _lock u; _lock xn && rm -f $LOCKFILE; }
_prepare_locking()  { eval "exec $LOCKFD>\"$LOCKFILE\""; trap _no_more_locking EXIT; }

_prepare_locking

exlock_now()        { _lock xn; }  # obtain an exclusive lock immediately or fail
exlock()            { _lock x; }   # obtain an exclusive lock
shlock()            { _lock s; }   # obtain a shared lock
unlock()            { _lock u; }   # drop a lock
exerror()           { echo "$1";exit "${2:-1}"; }

exlock_now || exerror "ERROR: Lockfile exists, is there another instance already running? Exiting..."

do_cleanup () {
    curl -s -POST http://192.168.100.5:12201/gelf -p0 -d '{"host":"{{ inventory_hostname }}","facility":"borg","message":"Backup failed","status":"ERR"}'
    echo "ERROR, exiting..."
    echo "Unmounting and removing snapshots"
{% if 'snapshots' in borg %}
{% for u in borg.snapshots %}
    /bin/umount {{ u.mnt }}
{% endfor %}
{% for l in borg.snapshots %}
    /sbin/lvremove {{ l.dev }}-snapshot -f
{% endfor %}
{% endif %}

    echo ""
    echo "Logfile:"
    cat "${LOGFILE}"

    exit 2
}

#trap 'echo "ERROR: Backup interrupted"; do_cleanup error; exit 2' INT TERM # Gracefully quit on (any) error
trap 'echo "received signal to stop"; do_cleanup interrupted; exit 1' SIGQUIT SIGTERM SIGINT # Gracefully quit on break

cp ${LOGFILE} ${LOGFILE}.1; /bin/true

echo "" > "${LOGFILE}"
echo "" > /var/log/borg_execution.log

echo "{{ borg.locations }}" > "${LOGFILE}"

curl -s -POST http://192.168.100.5:12201/gelf -p0 -d '{"host":"{{ inventory_hostname }}","facility":"borg","message":"Backup start","status":"OK"}'
echo "Start Backup $(date)"
echo "-------------------------------------------------------------------------------"
echo ""
{% if 'prescripts' in borg %}
{% for prescript in borg.prescripts %}
step "Prescript {{ prescript }}"
  try /root/{{ prescript }}
next
{% endfor %}
{% endif %}

{% if 'prescripts_docker' in borg %}
{% for prescript in borg.prescripts_docker %}
step "Prescript {{ prescript.name }}"
  try /root/{{ prescript.dest }}
next
{% endfor %}
{% endif %}

{% if 'snapshots' in borg %}
step "Create mountpoints"
{% for mk in borg.snapshots %}
  mkdir {{ mk.mnt }} -p || /bin/true
{% endfor %}
next

step "Create snapshots"
{% for s in borg.snapshots %}
  try /sbin/lvcreate -l{{ s.lvm_free|default('100%') }}FREE -s -n {{ s.name }}-snapshot {{ s.dev }}
{% endfor %}
next

step "Mount snapshots"
{% for m in borg.snapshots %}
  try /bin/mount {{ m.dev }}-snapshot {{ m.mnt }}
{% endfor %}
next
{% endif %}

step "Create backup"
  try /usr/bin/borg create ::{now} {{ borg.locations }} --show-rc
next

{% if 'snapshots' in borg %}
step "Umount and remove snapshots"
{% for u in borg.snapshots %}
  try /bin/umount {{ u.mnt }}
{% endfor %}
{% for l in borg.snapshots %}
  try /sbin/lvremove {{ l.dev }}-snapshot -f
{% endfor %}
next
{% endif %}

{% if 'postscripts' in borg %}
{% for postscript in borg.postscripts %}
step "Postscript {{ postscript }}"
  try /root/{{ postscript }}
next
{% endfor %}
{% endif %}

step "Prune backup generations"
  try /usr/bin/borg prune --keep-daily={{ borg.keepdaily }} --show-rc
next

if (( $(date +"%d") == 1)); then
  step "Backup Check (verify)"
    try /usr/bin/borg check --verify-data --show-rc
  next
else
  step "Backup Check (quick)"
    try /usr/bin/borg check --show-rc
  next
fi

step "Remove lock"
  try /usr/bin/borg break-lock
next

step "Export Repokey"
  try /usr/bin/borg key export :: --paper
next

step "Backup List"
  try /usr/bin/borg list
next

step "Backup Info"
  try /usr/bin/borg info
next

curl -s -POST http://192.168.100.5:12201/gelf -p0 -d '{"host":"{{ inventory_hostname }}","facility":"borg","message":"Backup end","status":"OK"}'
echo ""
echo "-------------------------------------------------------------------------------"
echo "Logfile:"
cat "${LOGFILE}"
echo "-------------------------------------------------------------------------------"

# prometheus logging
if_empty() {
  local var="${1}"

  if [[ -z "${var}" ]]; then
    var=0
  fi

  echo "${var}"
}

if_empty_quote() {
  local var="${1}"

  if [[ -z "${var}" ]]; then
    var='"none"'
  fi

  echo "${var}"
}

hostname=$(hostname)

borg_info=$(borg info --json)

total_chunks=$(echo ${borg_info} | jq .cache.stats.total_chunks)
total_csize=$(echo ${borg_info} | jq .cache.stats.total_csize)
total_size=$(echo ${borg_info} | jq .cache.stats.total_size)
total_unique_chunks=$(echo ${borg_info} | jq .cache.stats.total_unique_chunks)
unique_csize=$(echo ${borg_info} | jq .cache.stats.unique_csize)
unique_size=$(echo ${borg_info} | jq .cache.stats.unique_size)

last_modified=$(echo ${borg_info} | jq .repository.last_modified)
repository_id=$(echo ${borg_info} | jq .repository.id)
location=$(echo ${borg_info} | jq .repository.location)
encryption=$(echo ${borg_info} | jq .encryption.mode)

last_modified_strip=$(echo ${last_modified} | sed 's/"//g')
last_modified_epoch=$(date -d"${last_modified_strip}" +%s)

total_chunks=$(if_empty "${total_chunks}")
total_csize=$(if_empty "${total_csize}")
total_size=$(if_empty "${total_size}")
total_unique_chunks=$(if_empty "${total_unique_chunks}")
unique_csize=$(if_empty "${unique_csize}")
unique_size=$(if_empty "${unique_size}")

last_modified=$(if_empty_quote "${last_modified}")
repository_id=$(if_empty_quote "${repository_id}")
location=$(if_empty_quote "${location}")
encryption=$(if_empty_quote "${encryption}")
last_modified_epoch=$(if_empty_quote "${last_modified_epoch}")

if [ -f "/var/log/borg_execution.log" ]; then
    cat /var/log/borg_execution.log > /var/lib/prometheus/node-exporter/borg.prom
else
    echo "" > /var/lib/prometheus/node-exporter/borg.prom
fi

echo "borg_total_chunks{hostname=\"${hostname}\",repository_id=${repository_id}} ${total_chunks}" >> /var/lib/prometheus/node-exporter/borg.prom
echo "borg_total_csize{hostname=\"${hostname}\",repository_id=${repository_id}} ${total_csize}" >> /var/lib/prometheus/node-exporter/borg.prom
echo "borg_total_size{hostname=\"${hostname}\",repository_id=${repository_id}} ${total_size}" >> /var/lib/prometheus/node-exporter/borg.prom
echo "borg_total_unique_chunks{hostname=\"${hostname}\",repository_id=${repository_id}} ${total_unique_chunks}" >> /var/lib/prometheus/node-exporter/borg.prom
echo "borg_unique_csize{hostname=\"${hostname}\",repository_id=${repository_id}} ${unique_csize}" >> /var/lib/prometheus/node-exporter/borg.prom
echo "borg_unique_size{hostname=\"${hostname}\",repository_id=${repository_id}} ${unique_size}" >> /var/lib/prometheus/node-exporter/borg.prom
echo "borg_info{hostname=\"${hostname}\",repository_id=${repository_id},location=${location},encryption=${encryption}} ${last_modified_epoch}" >> /var/lib/prometheus/node-exporter/borg.prom
echo "borg_last_modified{hostname=\"${hostname}\",repository_id=${repository_id},last_modified=${last_modified}} ${last_modified_epoch}" >> /var/lib/prometheus/node-exporter/borg.prom
