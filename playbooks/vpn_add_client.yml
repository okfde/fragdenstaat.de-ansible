---
- name: Add VPN client
  hosts: localhost
  connection: local
  vars_prompt:
    - name: client_name
      prompt: "Name of the client?"
      private: no

  tasks:
    - name: Generate new private key locally
      local_action:
        module: shell
        cmd: "wg genkey"
      run_once: True
      register: private_key

    - name: Generate new public key locally
      local_action:
        module: command
        args:
          argv: ["wg", "pubkey"]
        stdin: "{{ private_key.stdout }}"
      register: public_key

    - name: Include role vars
      include_vars: "../roles/wireguard/defaults/main.yml"

    - name: Load vpn client list
      ansible.builtin.include_vars: "{{ lookup('ansible.builtin.first_found', params) }}"
      vars:
        params:
          files:
            - vpnclients.yml
            - vpnclients-default.yml
          paths:
            - "../env_vars"

    - name: Find max VPN peer id
      ansible.builtin.set_fact:
        max_peer_id: "{{ vpn_clientgroups.0.peers | map(attribute='peer_id') | max }}"

    - name: set new VPN peer id
      ansible.builtin.set_fact:
        peer_id: "{{ max_peer_id | int | default(0) + 1 }}"

    - name: Fail when peer id too large
      ansible.builtin.fail:
        msg: "Peer id {{peer_id}} too large! Please cleanup client list or set peer id manually!"
      when: peer_id|int >= 200

    - name: Make peer config
      local_action:
        module: template
        src: "../roles/wireguard/templates/client.conf.j2"
        dest: "../FDS_VPN_{{ client_name }}.conf"

    - name: Store peer config
      local_action:
        module: template
        src: "../roles/wireguard/templates/clientgroups.yml.j2"
        dest: "../env_vars/vpnclients.yml"

    - name: Encrypt vpn client list
      local_action:
        module: command
        cmd: "ansible-vault encrypt --vault-password-file ../vault.key ../env_vars/vpnclients.yml"

    - name: Print public key
      local_action:
        module: debug
        var: public_key.stdout
